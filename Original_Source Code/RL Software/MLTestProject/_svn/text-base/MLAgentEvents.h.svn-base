/////////////////////////////////////////////////////////
//MLAgentEvents.h
//Event raised when an agent has reached its goal.
//
//Manuel Madera
//10/24/09
/////////////////////////////////////////////////////////

#ifndef MLAgentEvents_h
#define MLAgentEvents_h

#include "Framework\IEventDistributor.h"
#include "MLTestProject.h"
#include "Framework\Packages.h"
#include "Framework\ISubscription.h"
#include "Framework\RemoteSubscription.h"
#include "Framework\ICommunicator.h"

#define AgentDoneEventPackageBufSize		8	//32 bytes
#define PhysicalPathDoneEventPackageBufSize	11

using namespace std;

namespace MLTest
{
	//AgentDone Subscription
	class ML_API AgentDoneEventPackage : public Framework::Eventing::RemoteSubscription
	{
	private:
		unsigned agentID;
		bool isTransfered;
		bool isGoalFound;
		Framework::Eventing::SubscriptionTypes::SubscriptionType type;
		Framework::Eventing::SubscriptionTypes::SubscriptionLife life;
		unsigned myBuffer[AgentDoneEventPackageBufSize];

	public:
		AgentDoneEventPackage();
		AgentDoneEventPackage(unsigned packageSource, unsigned packageDest, unsigned id = 0, bool transfered = false, bool hasFoundGoal = false);

		virtual ~AgentDoneEventPackage();

		Framework::Eventing::SubscriptionTypes::SubscriptionType GetSubscriptionType();

		Framework::Eventing::SubscriptionTypes::SubscriptionLife GetSubscriptionLife();

		void SetSubscriptionLife(Framework::Eventing::SubscriptionTypes::SubscriptionLife life);

		unsigned GetAgentId() const;

		bool IsTransfered() const;

		bool HasFoundGoal() const;

		RemoteSubscription *Clone() const;

		static IPackage *CreatePackage(unsigned source, unsigned dest);

	protected:
		void Send(unsigned destRank, unsigned messageTag, Framework::Communications::ICommunicator *comm);
		void Get(unsigned sourceRank, unsigned messageTag, Framework::Communications::ICommunicator *comm);

		void Serialize(Framework::Communications::ICommunicator *comm);
		void Deserialize(Framework::Communications::ICommunicator *comm);
	};

	typedef struct 
	{
		unsigned agentId;
		char start;
		char goal;
		unsigned pathNum;
		double pathTime;	
		unsigned numSteps;
	} PhysicalPathEventInfo;

	//AgentDone Subscription
	class ML_API PhysicalPathDoneEventPackage : public Framework::Eventing::RemoteSubscription
	{
	private:
		PhysicalPathEventInfo info;
		Framework::Eventing::SubscriptionTypes::SubscriptionType type;
		Framework::Eventing::SubscriptionTypes::SubscriptionLife life;
		double myBuffer[PhysicalPathDoneEventPackageBufSize];

	public:
		PhysicalPathDoneEventPackage();
		PhysicalPathDoneEventPackage(unsigned packageSource, unsigned packageDest);
		PhysicalPathDoneEventPackage(unsigned packageSource, unsigned packageDest, PhysicalPathEventInfo agentInfo);

		virtual ~PhysicalPathDoneEventPackage();

		Framework::Eventing::SubscriptionTypes::SubscriptionType GetSubscriptionType();

		Framework::Eventing::SubscriptionTypes::SubscriptionLife GetSubscriptionLife();

		void SetSubscriptionLife(Framework::Eventing::SubscriptionTypes::SubscriptionLife life);

		PhysicalPathEventInfo GetAgentInfo() const;

		RemoteSubscription *Clone() const;

		static IPackage *CreatePackage(unsigned source, unsigned dest);

	protected:
		void Send(unsigned destRank, unsigned messageTag, Framework::Communications::ICommunicator *comm);
		void Get(unsigned sourceRank, unsigned messageTag, Framework::Communications::ICommunicator *comm);

		void Serialize(Framework::Communications::ICommunicator *comm);
		void Deserialize(Framework::Communications::ICommunicator *comm);
	};
}

#endif	//MLAgentEvents_h